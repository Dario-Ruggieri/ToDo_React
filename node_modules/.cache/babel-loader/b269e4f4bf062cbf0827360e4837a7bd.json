{"ast":null,"code":"var _jsxFileName = \"/home/dario/Scrivania/tmp/todo_react_blog/src/components/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form(props) {\n  _s();\n  // Ogni componente permette di tracciare alcuni dati del componente stesso\n  // In questo caso si vuole tracciare l'input. Per il tracciamento, React\n  // mette a disposizione il tool state. Lo state è caratterizzato da una \n  // serie di funzioni che vengono chimate hook\n  const [name, setName] = useState('Use hooks!');\n  //Qua abbiamo una variabile name, che ha come valore iniziale \"Use hooks!\"\n  //e una funzione setName che permette di cambiare name. Io voglio gestire il\n  //cambiamento dell'input. Per questo motivo vado ad assegnare all'input il valore\n  //name, nel seguente modo value={name}\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(\"say hello\"); //Utilizzo la funzione addTask che è stata\n    //passata come parametro dal componente App\n  }\n\n  function handleChange(e) {\n    console.log(\"typing\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What needs to be done?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add a new ToDo\",\n      value: name,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: handleSubmit,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(Form, \"9bxC2pi23FJ9WUgOr+IeUiVDGnw=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Form","props","name","setName","handleSubmit","e","preventDefault","addTask","handleChange","console","log"],"sources":["/home/dario/Scrivania/tmp/todo_react_blog/src/components/Form.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form(props){\n    // Ogni componente permette di tracciare alcuni dati del componente stesso\n    // In questo caso si vuole tracciare l'input. Per il tracciamento, React\n    // mette a disposizione il tool state. Lo state è caratterizzato da una \n    // serie di funzioni che vengono chimate hook\n    const [name, setName] = useState('Use hooks!');\n    //Qua abbiamo una variabile name, che ha come valore iniziale \"Use hooks!\"\n    //e una funzione setName che permette di cambiare name. Io voglio gestire il\n    //cambiamento dell'input. Per questo motivo vado ad assegnare all'input il valore\n    //name, nel seguente modo value={name}\n    function handleSubmit(e) {\n        e.preventDefault();\n        props.addTask(\"say hello\"); //Utilizzo la funzione addTask che è stata\n        //passata come parametro dal componente App\n      }\n    function handleChange(e){\n        console.log(\"typing\");\n    }\n    return(\n        <form>\n            <h2>\n                What needs to be done?\n            </h2>\n            <input type=\"text\" placeholder=\"Add a new ToDo\" value={name}\n            onChange={handleChange}></input>\n            <button type=\"submit\" onClick={handleSubmit}>Add</button> \n            {/* Nel momento in cui clicco il bottone ho un evento, che mi \n            andrà a cambiare un altro componente:App\n            Non è però possibile passare dati da un child ad un parent (cosa che\n            invece è possibile da parent a child), come in questo\n            caso. Possiamo però scrivere una funzione nel componente App in modo tale\n            che si aspetti dei dati da Form. Passiamo quindi questa funzione come prop\n            a Form --> callback prop */}\n        </form>\n    )\n}\nexport default Form;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,SAASC,IAAI,CAACC,KAAK,EAAC;EAAA;EAChB;EACA;EACA;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,YAAY,CAAC;EAC9C;EACA;EACA;EACA;EACA,SAASK,YAAY,CAACC,CAAC,EAAE;IACrBA,CAAC,CAACC,cAAc,EAAE;IAClBL,KAAK,CAACM,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5B;EACF;;EACF,SAASC,YAAY,CAACH,CAAC,EAAC;IACpBI,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACzB;EACA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEK,eACL;MAAO,IAAI,EAAC,MAAM;MAAC,WAAW,EAAC,gBAAgB;MAAC,KAAK,EAAER,IAAK;MAC5D,QAAQ,EAAEM;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS,eAChC;MAAQ,IAAI,EAAC,QAAQ;MAAC,OAAO,EAAEJ,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa;EAAA;IAAA;IAAA;IAAA;EAAA,QAQtD;AAEf;AAAC,GAnCQJ,IAAI;AAAA,KAAJA,IAAI;AAoCb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}